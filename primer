#!/usr/bin/env sh

# Shell sanity
set -eu

# Root directory of the script
PRIMER_ROOT_DIR=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )
# Our library for scripts and dependencies.
PRIMER_LIB_DIR=
for _lib in libexec lib share/primer; do
    [ -z "${PRIMER_LIB_DIR}" ] && [ -d "${PRIMER_ROOT_DIR}/$_lib" ] && PRIMER_LIB_DIR="${PRIMER_ROOT_DIR}/$_lib"
    [ -z "${PRIMER_LIB_DIR}" ] && [ -d "${PRIMER_ROOT_DIR}/../$_lib" ] && PRIMER_LIB_DIR="${PRIMER_ROOT_DIR}/../$_lib"
done
[ -z "$PRIMER_LIB_DIR" ] && echo "Cannot find library directory!" >&2 && exit 1
# Top directory for yu.sh
PRIMER_YUSH_DIR="$PRIMER_LIB_DIR/yu.sh"
! [ -d "$PRIMER_LIB_DIR" ] && echo "Cannot find yu.sh directory!" >&2 && exit 1

# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/log.sh"
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/text.sh"
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/multi-arch.sh"


# This is the colon separated path where to find priming steps
PRIMER_PATH=${PRIMER_PATH:-}
[ -z "$PRIMER_PATH" ] && PRIMER_PATH=${PRIMER_LIB_DIR}/steps

# Space separated list of extensions for the steps
PRIMER_EXTS=${PRIMER_EXTS:-".sh"}

# These are a list of space separated steps to perform, the first step found in
# the PRIMER_PATH will be used.
PRIMER_STEPS=${PRIMER_STEPS:-}

# Configuration file to read, this will be a .env like file that can be used to
# pass options to the various implementations steps.
PRIMER_CONFIG=${PRIMER_CONFIG:-./primer.env}

# Should we allow substitution in configuration file.
PRIMER_SUBST=1

# Where to install binaries and libraries
PRIMER_LOCAL=${PRIMER_LOCAL:-/usr/local}
PRIMER_BINDIR=${PRIMER_BINDIR:-${PRIMER_LOCAL%%/}/bin}

# Source in all relevant modules. This is where most of the "stuff" will occur.
for module in utils os; do
  module_path="${PRIMER_LIB_DIR}/${module}.sh"
  if [ -f "$module_path" ]; then
    # shellcheck disable=SC1090
    . "$module_path"
  else
    echo "Cannot find module $module at $module_path !" >& 2
    exit 1
  fi
done

# Parse options
PRIMER_MODULE_OPTIONS= ; # --*:* options and their values will be saved here.
while [ $# -gt 0 ]; do
    case "$1" in
        -v | --verbose)
            YUSH_LOG_LEVEL=$2; shift 2;;
        --verbose=*)
            # shellcheck disable=SC2034
            YUSH_LOG_LEVEL="${1#*=}"; shift 1;;

        -s | --steps)
            PRIMER_STEPS=$2; shift 2;;
        --steps=*)
            PRIMER_STEPS="${1#*=}"; shift 1;;

        -p | --path)
            PRIMER_PATH=$2; shift 2;;
        --path=*)
            PRIMER_PATH="${1#*=}"; shift 1;;

        --*:*)
            # Capture and makes the difference between options that look like
            # --module:option and --module:option=value.
            _val=${1#*=};  # The value, when present is everything after the =
            _key=${1%=*};  # This is everything before the =, when present
            if [ "$_key" = "$_val" ]; then
                # This captures options that look like --module:option, where
                # the value is the coming argument. We extract the different
                # components using shell expansions and pass further a
                # (reconstructed) option to the module.
                _opt=${1#*:};  # Option is everything after the :
                _tmp=${1%:*};  # Module is everything before the : sans -
                _step=${_tmp##*-}
                PRIMER_MODULE_OPTIONS="$PRIMER_MODULE_OPTIONS
$_step $_opt $2"
                shift 2
            else
                # This captures options that look like --module:option=value. We
                # extract the different components using shell expansions and
                # pass further a (reconstructed) option to the module.
                _opt=${_key#*:};  # Option is everything after the :
                _tmp=${_key%:*};  # Module is everything before the : sans -
                _step=${_tmp##*-}
                PRIMER_MODULE_OPTIONS="$PRIMER_MODULE_OPTIONS
$_step $_opt $_val"
                shift 1
            fi
            ;;

        -c | --config)
            PRIMER_CONFIG=$2; shift 2;;
        --config=*)
            PRIMER_CONFIG="${1#*=}"; shift 1;;

        --no-subst)
            PRIMER_SUBST=0; shift 1;;

        -h | --help)
            usage 0;;
        --)
            shift; break;;
        -*)
            echo "Unknown option: $1 !" >&2 ; usage 1;;
        *)
            break;;
    esac
done

# Read configuration from .env formatted file
if [ -n "$PRIMER_CONFIG" ] && [ -f "$PRIMER_CONFIG" ]; then
    yush_info "Reading installation configuration from $PRIMER_CONFIG"
    while IFS='=' read -r key val; do
        # Skip over lines containing comments.
        # (Lines starting with '#').
        [ "${key##\#*}" ] || continue

        if [ -n "$key" ]; then
            yush_is_true "$PRIMER_SUBST" && val=$(yush_envsubst "$val")
            yush_debug "Setting $key=$val"
            export "${key}=${val}" 2>/dev/null || yush_warn "warning $key is not a valid variable name"
        fi
    done < "$PRIMER_CONFIG"
fi

# Pass command-line options that were saved in PRIMER_MODULE_OPTIONS to their
# respective modules. This is because command-line options should have
# precedence over environment variables (even if read from file).
while IFS= read -r line; do
    if [ -n "$line" ]; then
        _step=$(printf %s\\n "$line" | awk '{print $1}')
        _opt=$(printf %s\\n "$line" | awk '{print $2}')
        _val=$(printf %s\\n "$line" | awk '{print $3}')
        yush_info "Passing option --$_opt to $_step"
        if primer_load "$_step"; then
            $_step option "--$_opt" "$_val"
        fi
    fi
done <<EOF
$(printf %s\\n "$PRIMER_MODULE_OPTIONS")
EOF

# Discover how and if to sudo
primer_sudo

# Default command is to install
if [ "$#" -gt 0 ]; then
    cmd=$1
    shift
else
    cmd=install
fi

# Pass the command to all relevant steps, in order.
case "$(printf %s\\n "$cmd" | tr '[:upper:]' '[:lower:]')" in
    install | up)
        yush_notice "Installing $PRIMER_STEPS"
        for _step in $PRIMER_STEPS; do
            if primer_load "$_step"; then
                yush_info "Installing $_step"
                $_step install
            fi
        done
        ;;
    clean | remove | down)
        yush_notice "Removing $PRIMER_STEPS"
        for _step in $PRIMER_STEPS; do
            if primer_load "$_step"; then
                yush_info "Cleaning $_step"
                $_step clean
            fi
        done
        ;;
esac