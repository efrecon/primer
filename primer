#!/usr/bin/env sh

# Shell sanity
set -eu

# Root directory of the script
PRIMER_ROOT_DIR=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )
### AMLG_START
# Our library for scripts and dependencies.
PRIMER_LIB_DIR=
for _lib in libexec lib share/primer; do
    [ -z "${PRIMER_LIB_DIR}" ] && [ -d "${PRIMER_ROOT_DIR}/$_lib" ] && PRIMER_LIB_DIR="${PRIMER_ROOT_DIR}/$_lib"
    [ -z "${PRIMER_LIB_DIR}" ] && [ -d "${PRIMER_ROOT_DIR}/../$_lib" ] && PRIMER_LIB_DIR="${PRIMER_ROOT_DIR}/../$_lib"
done
[ -z "$PRIMER_LIB_DIR" ] && echo "Cannot find library directory!" >&2 && exit 1
# Top directory for yu.sh
PRIMER_YUSH_DIR="$PRIMER_LIB_DIR/yu.sh"
! [ -d "$PRIMER_YUSH_DIR" ] && echo "Cannot find yu.sh directory!" >&2 && exit 1
### AMLG_END

### AMLG_START ./libexec/yu.sh/log.sh ./libexec/yu.sh/text.sh ./libexec/yu.sh/file.sh ./libexec/yu.sh/multi-arch.sh ./libexec/yu.sh/net.sh
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/log.sh"
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/text.sh"
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/file.sh"
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/multi-arch.sh"
# shellcheck disable=SC1090
. "$PRIMER_YUSH_DIR/net.sh"
### AMLG_END

# This is the colon separated path where to find priming steps
PRIMER_PATH=${PRIMER_PATH:-}
### AMLG_START
[ -z "$PRIMER_PATH" ] && PRIMER_PATH=${PRIMER_LIB_DIR}/steps
### AMLG_END

# Space separated list of extensions for the steps
PRIMER_EXTS=${PRIMER_EXTS:-".sh"}

# These are a list of space separated steps to perform, the first step found in
# the PRIMER_PATH will be used.
PRIMER_STEPS=${PRIMER_STEPS:-}

# Configuration file to read, this will be a .env like file that can be used to
# pass options to the various implementations steps. When empty, the default,
# the file called primer.env in the current working directory will be read. On
# top of that file, if a file called primer_<mac>.env exists (<mac> being
# replaced by the MAC address of the primary ethernet interface, in lowercase,
# with colon as separators), it will also be read. This allows generic data to
# be kept in the main primer.env and host specific to be hold in the file with
# the mac address.
PRIMER_CONFIG=${PRIMER_CONFIG:-}

# Should we allow substitution in configuration file.
PRIMER_SUBST=1

# Where to install binaries and libraries
PRIMER_LOCAL=${PRIMER_LOCAL:-/usr/local}
PRIMER_BINDIR=${PRIMER_BINDIR:-${PRIMER_LOCAL%%/}/bin}
PRIMER_OPTDIR=${PRIMER_OPTDIR:-${PRIMER_LOCAL%%/}/opt}
PRIMER_LIBDIR=${PRIMER_LIBDIR:-${PRIMER_LOCAL%%/}/lib}

# Matching file for curl options
PRIMER_CURL_OPTIONS=${PRIMER_CURL_OPTIONS:-}

primer_abort() {
    yush_error "$1"
    exit 1
}

### AMLG_START ./libexec/*.sh
# Source in all relevant modules. This is where most of the "stuff" will occur.
_modules=$(find "${PRIMER_LIB_DIR}" -maxdepth 1 -mindepth 1 \( -name '*.sh' -a ! -name 'x-*.sh' \) -exec basename '{}' \; | sed -e 's/\.sh$//g' | tr '\n' ' ')
for module in $_modules; do
    module_path="${PRIMER_LIB_DIR}/${module}.sh"
    if [ -f "$module_path" ]; then
        yush_trace "Loading $module from $module_path"
        # shellcheck disable=SC1090
        . "$module_path"
    fi
done
### AMLG_END

### AMLG_START ./libexec/steps/*.sh
### AMLG_END

# Print usage on stderr and exit
usage() {
    [ -n "$1" ] && echo "$1" >&2
    exitcode="${2:-1}"
    cat <<USAGE >&2

Description:

  $YUSH_APPNAME will execute a number of steps to initialise a pristine
  machine in a deterministic way.

Usage:
  $(basename "$0") [-option arg --long-option(=)arg] cmd

  where all dash-led options are as follows (long options can be followed by
  an equal sign):
    -s | --steps     List of steps to perform
    -p | --path      Colon separated path to search for steps.
    -c | --config    .env config file to read, defaults to primer.env in cwd,
                     then primer_<mac>.env in cwd if they exist (<mac> will be
                     replaced with the MAC address of the primary Ethernet
                     interface, in lower-case without separators)
    --no-subst       Do not substitute env variables in config files.
    --xx:yy          Provided xx is a step, pass the option --yy to its function
    --curl           Path to curl options matching DB
    -h | --help      Print this help and exit
    -v | --verbose   Verbosity level

  Accepted commands are the following (there are aliases):
    install | up
        This is the default command, it will perform all the installation steps
        specified through the PRIMER_STEPS environment variable or the --steps
        option
    clean | remove | down
        Uninstall the steps specified as for the install command
    env | environment
        List all known and accessible steps, together with the options and
        environment variables that can be used to modify their behaviour. This
        also prints out host information, e.g. hostname, MAC address, distro,
        version, etc.
    info
        List all options and environmnet variables that can be used to modify
        the behaviour of the steps to be run. The list of steps can be specified
        as for the install command
    help
        Print this help and exit.

USAGE
    exit "$exitcode"
}

# Parse options
PRIMER_STEP_OPTIONS= ; # --*:* options and their values will be saved here.
OPT_STEPS=
while [ $# -gt 0 ]; do
    case "$1" in
        -s | --steps)
            OPT_STEPS=$2; shift 2;;
        --steps=*)
            OPT_STEPS="${1#*=}"; shift 1;;

        -p | --path)
            PRIMER_PATH=$2; shift 2;;
        --path=*)
            PRIMER_PATH="${1#*=}"; shift 1;;

        --*:*)
            # Capture and makes the difference between options that look like
            # --module:option and --module:option=value.
            _val=${1#*=};  # The value, when present is everything after the =
            _key=${1%=*};  # This is everything before the =, when present
            if [ "$_key" = "$_val" ]; then
                # This captures options that look like --module:option, where
                # the value is the coming argument. We extract the different
                # components using shell expansions and pass further a
                # (reconstructed) option to the module.
                _opt=${1#*:};  # Option is everything after the :
                _tmp=${1%:*};  # Module is everything before the : sans -
                _step=${_tmp##*-}
                PRIMER_STEP_OPTIONS="$PRIMER_STEP_OPTIONS
$_step $_opt $2"
                shift 2
            else
                # This captures options that look like --module:option=value. We
                # extract the different components using shell expansions and
                # pass further a (reconstructed) option to the module.
                _opt=${_key#*:};  # Option is everything after the :
                _tmp=${_key%:*};  # Module is everything before the : sans -
                _step=${_tmp##*-}
                PRIMER_STEP_OPTIONS="$PRIMER_STEP_OPTIONS
$_step $_opt $_val"
                shift 1
            fi
            ;;

        -c | --config)
            PRIMER_CONFIG=$2; shift 2;;
        --config=*)
            PRIMER_CONFIG="${1#*=}"; shift 1;;

        --curl)
            PRIMER_CURL_OPTIONS=$2; shift 2;;
        --curl=*)
            PRIMER_CURL_OPTIONS="${1#*=}"; shift 1;;

        --no-subst)
            PRIMER_SUBST=0; shift 1;;

        -v | --verbose)
            YUSH_LOG_LEVEL=$2; shift 2;;
        --verbose=*)
            # shellcheck disable=SC2034
            YUSH_LOG_LEVEL="${1#*=}"; shift 1;;

        --non-interactive | --no-colour | --no-color)
            # shellcheck disable=SC2034
            YUSH_LOG_COLOUR=0; shift 1;;

        -h | --help)
            usage "" 0;;
        --)
            shift; break;;
        -*)
            usage "Unknown option: $1 !" 1;;
        *)
            break;;
    esac
done

# Read configuration (as in .env terminated) file passed as a parameter.
primer_config() {
    if [ -f "$1" ]; then
        yush_info "Reading installation configuration from $1"
        while IFS='=' read -r key val || [ -n "$key" ]; do
            # Skip over lines containing comments.
            # (Lines starting with '#').
            [ "${key##\#*}" ] || continue

            if [ -n "$key" ]; then
                yush_is_true "$PRIMER_SUBST" && val=$(yush_envsubst "$val")
                yush_debug "Setting $key=$val"
                export "${key}=${val}" 2>/dev/null || yush_warn "warning $key is not a valid variable name"
            fi
        done < "$1"
    fi
}

# Return the list of known steps. Due to amalgamation, there is a possibility
# that steps are printed out twice.
primer_steps() {
### AMLG_START
    for _fpath in $(primer_utils_find '*'); do
        _step=$(yush_basename "$_fpath")
        echo "${_step%.*}"
    done
### AMLG_END

    # When run as an amalgamation, we have to discover the steps from the list
    # of functions that are present in the amalgamation. Ideally, we would like
    # to ask the runtime, e.g. by calling set, but this does not work on POSIX
    # shells. So we grep inside our own code.
    grep -oE "^primer_step_([a-z0-9_]+)\s*\(\)" "$0" |
        sed -E 's/primer_step_([a-z0-9_]+)\s*\(\)/\1/'
}

# Print out information about a given step: the command line options and flags
# that it takes, and the external variables that can be set to change it
# behaviour.
primer_info() {
    _oldstate=$(set +o); set -f
    if primer_utils_loadif "$1"; then
        # Print out the step and the options that it accepts through
        # asking for its options.
        printf "%s: %s\n" "$1" "$("primer_step_$1" option)"
        # Now, for all known variables starting with the PRIMER_STEP
        # followed by the name of the step in uppercase, look for the
        # ones that can be set from the outside and print out their
        # current value.
        _vars=PRIMER_STEP_$(printf %s\\n "$1" | tr '[:lower:]' '[:upper:]')
        while IFS= read -r _varset; do
            # The variable name is everything before the equal sign.
            _var=$(printf %s\\n "$_varset" | sed -E 's/^(PRIMER_STEP_[A-Z0-9_]+)=.*/\1/')
            # Ask where the step was loaded from
            _origin=$(primer_utils_origin "$1")
            # If we found an origin and the variable is set from itself
            # as a default, then it is an external variable. Print out
            # the original set line.
            if [ -n "$_origin" ] && grep -Eq "^${_var}\s*=\s*\\\$\{${_var}:" "$_origin"; then
                printf \\t%s\\n "$_varset"
            fi
        done <<EOF
$(set|grep "^$_vars"|grep "=")
EOF
    fi
    set +vx; eval "$_oldstate"

}

primer_hostinfo() {
    yush_info "Getting Host information"
    _mac=$(primer_net_macaddr "$(primer_net_primary_interface)")

    printf "_hostinfo:\n"
    printf '\tdistribution: %s\n' "$(primer_os_distribution)"
    printf '\tversion: %s\n' "$(primer_os_version)"
    printf '\thostname: %s\n' "$(hostname)"
    printf '\tmac: %s\n' "$_mac"
}

# Discover OS type and how to run sudo.
primer_os_init

# Read configuration from .env formatted file(s)
if [ -n "$PRIMER_CONFIG" ]; then
    primer_config "$PRIMER_CONFIG"
else
    primer_config "./primer.env"
    # Note that this automagically installs the iproute2 package in a Ubuntu
    # Docker container, as the ip command does not exists there...
    _mac=$(primer_net_macaddr "$(primer_net_primary_interface)" | tr -d ':')
    [ -n "$_mac" ] && primer_config "./primer_${_mac}.env"
fi

# Pass command-line options that were saved in PRIMER_STEP_OPTIONS to their
# respective modules. This is because command-line options should have
# precedence over environment variables (even if read from file).
[ -n "$OPT_STEPS" ] && PRIMER_STEPS=$OPT_STEPS
while IFS= read -r line; do
    if [ -n "$line" ]; then
        _step=$(printf %s\\n "$line" | cut -d " " -f 1)
        _opt=$(printf %s\\n "$line" | cut -d " " -f 2)
        # Take everything for the value in case it contains spaces.
        _val=$(printf %s\\n "$line" | cut -d " " -f 3-)
        yush_info "Passing option --$_opt to $_step"
        if primer_utils_loadif "$_step"; then
            "primer_step_$_step" option "--$_opt" "$_val"
        fi
    fi
done <<EOF
$(printf %s\\n "$PRIMER_STEP_OPTIONS")
EOF


# Default command is to install
if [ "$#" -gt 0 ]; then
    cmd=$1
    shift
else
    cmd=install
fi

# Pass the command to all relevant steps, in order.
case "$(printf %s\\n "$cmd" | tr '[:upper:]' '[:lower:]')" in
    install | up)
        yush_notice "Installing steps: $PRIMER_STEPS"
        for _step in $PRIMER_STEPS; do
            if primer_utils_loadif "$_step"; then
                yush_info "Primer step install>>> $(yush_green "$_step")"
                "primer_step_$_step" install
            fi
        done
        ;;
    clean | remove | down)
        yush_notice "Cleaning steps: $PRIMER_STEPS"
        for _step in $PRIMER_STEPS; do
            if primer_utils_loadif "$_step"; then
                yush_info "Primer step <<<clean $(yush_red "$_step")"
                "primer_step_$_step" clean
            fi
        done
        ;;
    env*)
        primer_hostinfo
        yush_info "Getting known accessible steps"
        for _step in $(primer_steps | sort -u); do
            primer_info "$_step"
        done
        ;;
    info*)
        yush_info "Getting info for steps to run"
        for _step in $PRIMER_STEPS; do
            primer_info "$_step"
        done
        ;;
    help)
        usage "" 0;;
esac
